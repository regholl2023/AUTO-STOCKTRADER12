[
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "unicode_literals",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "backtrader.btrun",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "backtrader.btrun",
        "description": "backtrader.btrun",
        "detail": "backtrader.btrun",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "getpass",
        "importPath": "getpass",
        "description": "getpass",
        "isExtraImport": true,
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "print_",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "__version__",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "CockroachDatabase",
        "importPath": "playhouse.cockroachdb",
        "description": "playhouse.cockroachdb",
        "isExtraImport": true,
        "detail": "playhouse.cockroachdb",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "playhouse.reflection",
        "description": "playhouse.reflection",
        "isExtraImport": true,
        "detail": "playhouse.reflection",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "yfinance",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yfinance",
        "description": "yfinance",
        "detail": "yfinance",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "backtrader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "backtrader",
        "description": "backtrader",
        "detail": "backtrader",
        "documentation": {}
    },
    {
        "label": "ta",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ta",
        "description": "ta",
        "detail": "ta",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "class BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "UnknownField",
        "kind": 6,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "class UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],\n    MySQLDatabase: ['mysql', 'mysqldb'],\n    PostgresqlDatabase: ['postgres', 'postgresql'],\n    SqliteDatabase: ['sqlite', 'sqlite3'],\n}\nDATABASE_MAP = dict((value, key)",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "make_introspector",
        "kind": 2,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "def make_introspector(database_type, database_name, **kwargs):\n    if database_type not in DATABASE_MAP:\n        err('Unrecognized database, must be one of: %s' %\n            ', '.join(DATABASE_MAP.keys()))\n        sys.exit(1)\n    schema = kwargs.pop('schema', None)\n    DatabaseClass = DATABASE_MAP[database_type]\n    db = DatabaseClass(database_name, **kwargs)\n    return Introspector.from_database(db, schema=schema)\ndef print_models(introspector, tables=None, preserve_order=False,",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "print_models",
        "kind": 2,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "def print_models(introspector, tables=None, preserve_order=False,\n                 include_views=False, ignore_unknown=False, snake_case=True):\n    database = introspector.introspect(table_names=tables,\n                                       include_views=include_views,\n                                       snake_case=snake_case)\n    db_kwargs = introspector.get_database_kwargs()\n    header = HEADER % (\n        introspector.get_additional_imports(),\n        introspector.get_database_class().__name__,\n        introspector.get_database_name(),",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "def print_header(cmd_line, introspector):\n    timestamp = datetime.datetime.now()\n    print_('# Code generated by:')\n    print_('# python -m pwiz %s' % cmd_line)\n    print_('# Date: %s' % timestamp.strftime('%B %d, %Y %I:%M%p'))\n    print_('# Database: %s' % introspector.get_database_name())\n    print_('# Peewee version: %s' % peewee_version)\n    print_('')\ndef err(msg):\n    sys.stderr.write('\\033[91m%s\\033[0m\\n' % msg)",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "err",
        "kind": 2,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "def err(msg):\n    sys.stderr.write('\\033[91m%s\\033[0m\\n' % msg)\n    sys.stderr.flush()\ndef get_option_parser():\n    parser = OptionParser(usage='usage: %prog [options] database_name')\n    ao = parser.add_option\n    ao('-H', '--host', dest='host')\n    ao('-p', '--port', dest='port', type='int')\n    ao('-u', '--user', dest='user')\n    ao('-P', '--password', dest='password', action='store_true')",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "get_option_parser",
        "kind": 2,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "def get_option_parser():\n    parser = OptionParser(usage='usage: %prog [options] database_name')\n    ao = parser.add_option\n    ao('-H', '--host', dest='host')\n    ao('-p', '--port', dest='port', type='int')\n    ao('-u', '--user', dest='user')\n    ao('-P', '--password', dest='password', action='store_true')\n    engines = sorted(DATABASE_MAP)\n    ao('-e', '--engine', dest='engine', choices=engines,\n       help=('Database type, e.g. sqlite, mysql, postgresql or cockroachdb. '",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "get_connect_kwargs",
        "kind": 2,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "def get_connect_kwargs(options):\n    ops = ('host', 'port', 'user', 'schema')\n    kwargs = dict((o, getattr(options, o)) for o in ops if getattr(options, o))\n    if options.password:\n        kwargs['password'] = getpass()\n    return kwargs\nif __name__ == '__main__':\n    raw_argv = sys.argv\n    parser = get_option_parser()\n    options, args = parser.parse_args()",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "HEADER",
        "kind": 5,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "HEADER = \"\"\"from peewee import *%s\ndatabase = %s('%s'%s)\n\"\"\"\nBASE_MODEL = \"\"\"\\\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "database = %s('%s'%s)\n\"\"\"\nBASE_MODEL = \"\"\"\\\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "BASE_MODEL",
        "kind": 5,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "BASE_MODEL = \"\"\"\\\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_FIELD",
        "kind": 5,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "UNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],\n    MySQLDatabase: ['mysql', 'mysqldb'],\n    PostgresqlDatabase: ['postgres', 'postgresql'],\n    SqliteDatabase: ['sqlite', 'sqlite3'],\n}",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "DATABASE_ALIASES",
        "kind": 5,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "DATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],\n    MySQLDatabase: ['mysql', 'mysqldb'],\n    PostgresqlDatabase: ['postgres', 'postgresql'],\n    SqliteDatabase: ['sqlite', 'sqlite3'],\n}\nDATABASE_MAP = dict((value, key)\n                    for key in DATABASE_ALIASES\n                    for value in DATABASE_ALIASES[key])\ndef make_introspector(database_type, database_name, **kwargs):",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "DATABASE_MAP",
        "kind": 5,
        "importPath": ".venv.Scripts.pwiz",
        "description": ".venv.Scripts.pwiz",
        "peekOfCode": "DATABASE_MAP = dict((value, key)\n                    for key in DATABASE_ALIASES\n                    for value in DATABASE_ALIASES[key])\ndef make_introspector(database_type, database_name, **kwargs):\n    if database_type not in DATABASE_MAP:\n        err('Unrecognized database, must be one of: %s' %\n            ', '.join(DATABASE_MAP.keys()))\n        sys.exit(1)\n    schema = kwargs.pop('schema', None)\n    DatabaseClass = DATABASE_MAP[database_type]",
        "detail": ".venv.Scripts.pwiz",
        "documentation": {}
    },
    {
        "label": "get_stock_data",
        "kind": 2,
        "importPath": "Trading",
        "description": "Trading",
        "peekOfCode": "def get_stock_data(ticker, start_date, end_date):\n    stock_data = yf.download(ticker, start=start_date, end=end_date)\n    stock_data.fillna(method='ffill', inplace=True)\n    return stock_data\n# STEP 2: Calculate Technical Indicators\ndef calculate_indicators(data):\n    data['MACD'] = ta.trend.macd(data['Close'])\n    data['MACD_Signal'] = ta.trend.macd_signal(data['Close'])\n    data['RSI'] = ta.momentum.rsi(data['Close'])\n    return data",
        "detail": "Trading",
        "documentation": {}
    },
    {
        "label": "calculate_indicators",
        "kind": 2,
        "importPath": "Trading",
        "description": "Trading",
        "peekOfCode": "def calculate_indicators(data):\n    data['MACD'] = ta.trend.macd(data['Close'])\n    data['MACD_Signal'] = ta.trend.macd_signal(data['Close'])\n    data['RSI'] = ta.momentum.rsi(data['Close'])\n    return data\n# STEP 3: Generate Buy/Sell Signals\ndef generate_signals(data):\n    data['Buy_Signal'] = ((data['MACD'] > data['MACD_Signal']) & \n                          (data['MACD'].shift(1) <= data['MACD_Signal'].shift(1))).astype(int)\n    data['Sell_Signal'] = ((data['MACD'] < data['MACD_Signal']) & ",
        "detail": "Trading",
        "documentation": {}
    },
    {
        "label": "generate_signals",
        "kind": 2,
        "importPath": "Trading",
        "description": "Trading",
        "peekOfCode": "def generate_signals(data):\n    data['Buy_Signal'] = ((data['MACD'] > data['MACD_Signal']) & \n                          (data['MACD'].shift(1) <= data['MACD_Signal'].shift(1))).astype(int)\n    data['Sell_Signal'] = ((data['MACD'] < data['MACD_Signal']) & \n                           (data['MACD'].shift(1) >= data['MACD_Signal'].shift(1))).astype(int)\n    return data\n# STEP 4: Visualization\ndef plot_signals(data):\n    plt.figure(figsize=(14, 7))\n    plt.plot(data['Close'], label='Close Price', alpha=0.5)",
        "detail": "Trading",
        "documentation": {}
    },
    {
        "label": "plot_signals",
        "kind": 2,
        "importPath": "Trading",
        "description": "Trading",
        "peekOfCode": "def plot_signals(data):\n    plt.figure(figsize=(14, 7))\n    plt.plot(data['Close'], label='Close Price', alpha=0.5)\n    plt.plot(data['MACD'], label='MACD', color='red', alpha=0.5)\n    plt.plot(data['MACD_Signal'], label='Signal Line', color='blue', alpha=0.5)\n    plt.scatter(data.index, data['Close'].where(data['Buy_Signal'] == 1), label='Buy Signal', marker='^', color='green', alpha=1)\n    plt.scatter(data.index, data['Close'].where(data['Sell_Signal'] == 1), label='Sell Signal', marker='v', color='red', alpha=1)\n    plt.title('Stock Price with Buy and Sell Signals')\n    plt.legend()\n    plt.show()",
        "detail": "Trading",
        "documentation": {}
    },
    {
        "label": "implement_trading_strategy",
        "kind": 2,
        "importPath": "Trading",
        "description": "Trading",
        "peekOfCode": "def implement_trading_strategy(data, initial_capital=10000):\n    data['Position'] = 0  # 1 for long, -1 for short, 0 for neutral\n    data['Trade'] = 0  # 1 for buy, -1 for sell\n    data['Portfolio'] = initial_capital\n    position = 0\n    for i in range(1, len(data)):\n        if data['Buy_Signal'].iloc[i] == 1 and position == 0:\n            position = 1\n            data['Position'].iloc[i] = 1\n            data['Trade'].iloc[i] = 1",
        "detail": "Trading",
        "documentation": {}
    },
    {
        "label": "print_strategy_performance",
        "kind": 2,
        "importPath": "Trading",
        "description": "Trading",
        "peekOfCode": "def print_strategy_performance(data, initial_capital):\n    total_return = (data['Portfolio'].iloc[-1] - initial_capital) / initial_capital * 100\n    buy_hold_return = (data['Close'].iloc[-1] - data['Close'].iloc[0]) / data['Close'].iloc[0] * 100\n    print(f\"Strategy Total Return: {total_return:.2f}%\")\n    print(f\"Buy and Hold Return: {buy_hold_return:.2f}%\")\n# Update the main execution block\nif __name__ == \"__main__\":\n    ticker = \"AAPL\"\n    start_date = \"2020-01-01\"\n    end_date = \"2023-01-01\"",
        "detail": "Trading",
        "documentation": {}
    }
]